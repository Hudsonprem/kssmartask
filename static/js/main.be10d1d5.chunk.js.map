{"version":3,"sources":["components/contactform.js","components/firebase.js","components/contacts.js","components/SignIn/SignIn.js","components/SignUp/SignUp.js","components/header.js","App.js","serviceWorker.js","index.js"],"names":["Contactform","props","initialValues","name","mobile","address","email","useState","values","setValues","useEffect","postId","post","onChangeValue","e","target","value","autoComplete","onSubmit","preventDefault","AddorChange","className","placeholder","onChange","class","type","firebaseDB","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","ref","Contacts","setPost","setPostId","FirebaseDb","child","on","val","style","overflowX","Object","keys","map","id","key","onClick","window","confirm","remove","err","console","log","obj","push","set","Login","formik","useFormik","Email","Password","validationSchema","yup","required","userInputData","auth","signInWithEmailAndPassword","then","onLogin","catch","toast","error","message","handleSubmit","handleChange","errors","href","onchange","SignUp","confirmpassword","oneOf","createUserWithEmailAndPassword","success","Header","onLogOut","username","setUserName","onAuthStateChanged","user","signOut","App","show","setShow","showComponent","componentName","setComponent","components","justifyContent","backgroundColor","data-name","xmlns","viewBox","preserveAspectRatio","d","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.be10d1d5.chunk.js","sourcesContent":["import React,{useEffect, useState} from 'react'\r\n\r\nfunction Contactform(props) {\r\n\r\n    const initialValues = {\r\n        name: \"\",\r\n        mobile : \"\",\r\n        address: \"\",\r\n        email: \"\"\r\n    }\r\n\r\n    var [values, setValues] = useState(initialValues);\r\n\r\n    useEffect(() => {       \r\n        if(props.postId === '')\r\n            setValues({\r\n                ...initialValues\r\n            })\r\n        else  \r\n            setValues({\r\n                ...props.post[props.postId]\r\n            })\r\n         },[props.postId, props.post])\r\n\r\n\r\n    const onChangeValue = (e) => {\r\n        var {name ,value} = e.target;\r\n\r\n        setValues({\r\n            ...values,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const handleOnchange = (e) => {\r\n        e.preventDefault();\r\n        props.AddorChange(values);\r\n    } \r\n\r\n    return (\r\n        <form autoComplete=\"off\" onSubmit={handleOnchange}>\r\n            <div className=\"form-group input-group\">\r\n                <div className=\"input-group-prepend\">\r\n                    <div className=\"input-group-text\">\r\n                        <i className=\"far fa-user\"></i>\r\n                    </div>\r\n               </div>\r\n               <input className=\"form-control\" placeholder=\"Full Name\" name=\"name\" value={values.name}  onChange={onChangeValue}/>\r\n             </div>\r\n\r\n                <div className=\"form-group input-group \">\r\n                    <div className=\"input-group-prepend\">\r\n                        <div className=\"input-group-text\">\r\n                        <i className=\"far fa-envelope\"></i>\r\n                        </div>\r\n                </div>\r\n                <input className=\"form-control\" placeholder=\"Email\" name=\"email\" value={values.email} onChange={onChangeValue}/>\r\n                </div>\r\n\r\n                <div className=\"form-group input-group\">\r\n                    <div className=\"input-group-prepend\">\r\n                        <div className=\"input-group-text\">\r\n                        <i class=\"fas fa-mobile-alt\"></i>\r\n                        </div>\r\n                </div>\r\n                <input className=\"form-control\" placeholder=\"Mobile\" name=\"mobile\" value={values.mobile} onChange={onChangeValue}/>\r\n                </div>\r\n\r\n                 <div className=\"form-group\">\r\n                  <textarea className=\"form-control\" placeholder=\"Address\" name=\"address\" value={values.address}  onChange={onChangeValue}/>\r\n                </div>\r\n                \r\n                <div className=\"form-group\">\r\n                  <input type=\"submit\" value = {props.postId === ''  ? \"submit\" : \"Update\"} className=\"btn btn-primary btn-block\"/>\r\n                </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Contactform\r\n","import * as firebase from \"firebase\";\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyAq57tUvBTFR_WLqXbOXfD-wI_aUdgvCYc\",\r\n    authDomain: \"kssmart-task.firebaseapp.com\",\r\n    databaseURL: \"https://kssmart-task.firebaseio.com\",\r\n    projectId: \"kssmart-task\",\r\n    storageBucket: \"kssmart-task.appspot.com\",\r\n    messagingSenderId: \"947946347391\",\r\n    appId: \"1:947946347391:web:d9d601908134a79b1bd84a\"\r\n  };\r\n\r\n  export var firebaseDB = firebase.initializeApp(firebaseConfig);\r\n\r\n  export default firebaseDB.database().ref();\r\n\r\n  \r\n  ","import React, { useEffect, useState} from 'react';\r\nimport Contactform from \"./contactform\";\r\nimport FirebaseDb from \"./firebase\";\r\nimport \"./contact.css\";\r\n\r\nfunction Contacts() {\r\n       \r\n     var [post, setPost] = useState({});\r\n     var [postId, setPostId] = useState(\"\");\r\n\r\n     //fetch data from database\r\n     useEffect(() => {               \r\n        FirebaseDb.child('posts').on(\"value\",e => {     \r\n        if(e.val() != null)\r\n          setPost({\r\n              ...e.val()\r\n          })\r\n          else \r\n          setPost({})\r\n        })\r\n     },[])\r\n\r\n\r\n\r\n    const AddorChange = obj => {\r\n        if(postId === \"\")\r\n        {\r\n            FirebaseDb.child('posts').push(\r\n                obj,\r\n                err => { \r\n                    if(err)\r\n                      console.log(err)\r\n                }\r\n            )\r\n        }\r\n        else{\r\n            FirebaseDb.child(`posts/${postId}`).set(\r\n                obj,\r\n                err => { \r\n                    if(err)\r\n                      console.log(err)\r\n                    else\r\n                    setPostId(\"\");\r\n                }\r\n            )\r\n        }\r\n       \r\n    }\r\n\r\n    const onDelete = key => {\r\n        if(window.confirm(\"want to delete this record? \"))\r\n        {\r\n        FirebaseDb.child(`posts/${key}`).remove(\r\n            err => { \r\n                if(err)\r\n                  console.log(err)\r\n                else\r\n                  setPostId('');\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n    <>\r\n        <div className=\"jumbotron jumbotron-fluid main\">\r\n            <div className=\"container\">\r\n                <h1 className=\"display-4 text-center\">KS SMART Task </h1>\r\n            </div>   \r\n        </div>\r\n        \r\n        <div className=\"row div2 w-auto\">\r\n             \r\n            <div className=\"col-md-auto\" style={{overflowX:\"auto\"}}>\r\n                <table className=\"table table-borderless table-stripped\" >\r\n                   <thead className=\"thead-light\">\r\n                       <tr>\r\n                       <th>Name</th>\r\n                       <th>Mobile</th>\r\n                       <th className=\"w-25\">Email</th>\r\n                       <th>Edit/Remove</th>\r\n                       </tr>\r\n                   </thead>\r\n                   <tbody>\r\n                       {\r\n                           Object.keys(post).map(id => {\r\n                               return <tr key={id}>\r\n                                 <td>{post[id].name}</td>\r\n                                 <td>{post[id].mobile}</td>\r\n                                 <td>{post[id].email}</td>\r\n                                 <td>\r\n                                     <a className=\"btn text-primary\" onClick = {() => { setPostId(id)}}>\r\n                                         <i class=\"fas fa-user-edit\"></i>\r\n                                     </a>\r\n                                     <a className=\"btn text-danger\">\r\n                                     <i class=\"fas fa-user-times\" onClick = {() => {onDelete(id)}}></i>\r\n                                     </a>\r\n                                 </td>\r\n                              </tr>}\r\n                           )\r\n                       }\r\n                   </tbody>\r\n                </table>\r\n            </div>  \r\n           \r\n            <div className=\"col-md-4\">\r\n                <Contactform {...({AddorChange,postId,post})}/>\r\n            </div>  \r\n        </div>\r\n    </>\r\n    )\r\n}\r\n\r\nexport default Contacts","import React from \"react\";\r\nimport \"./signIn.css\";\r\nimport {  ToastContainer , toast } from \"react-toastify\";\r\nimport { useFormik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n\r\nimport {firebaseDB} from \"../firebase\";\r\n\r\nfunction Login(props) {\r\n    const formik = useFormik({\r\n        initialValues : {\r\n            Email:\"\",\r\n            Password:\"\"\r\n        },\r\n        validationSchema:yup.object({\r\n           \r\n            Email: yup.string()\r\n            .email()\r\n            .required(\"Email is required\"),\r\n          \r\n            Password: yup.string()\r\n            .required(\"password is required\"),\r\n            \r\n        }),\r\n        onSubmit: (userInputData)=>{\r\n\r\n            firebaseDB.auth()\r\n                     .signInWithEmailAndPassword(userInputData.Email, userInputData.Password)\r\n                     .then(() => props.onLogin())\r\n                     .catch((err) => toast.error(err.message))\r\n        \r\n                      \r\n        }\r\n        \r\n    } )\r\n\r\n\r\n        return (\r\n            <div>\r\n            <div className =\"signIn-div-background\" >\r\n             <ToastContainer /> \r\n             \r\n            <form className=\"signIn-div\"  autoComplete=\"off\" onSubmit = {formik.handleSubmit}>\r\n                <h3 className=\"text-center\">SIGN IN</h3>\r\n\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Email</label>\r\n                    <input \r\n                    className=\"form-control\"\r\n                    type=\"text\"  \r\n                    name=\"Email\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.Email}  \r\n                    placeholder=\"email\" />\r\n                </div>\r\n                {formik.errors.Email ? (<div className=\"text-danger\">\r\n                        {formik.errors.Email}\r\n                </div>): null }\r\n\r\n                <div className=\"form-group\">\r\n                    <label >Password</label>\r\n                    <input \r\n                    className=\"form-control\"\r\n                    type=\"password\"  \r\n                    name=\"Password\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.Password}  \r\n                    placeholder=\"Password\" />\r\n                </div>\r\n\r\n                {formik.errors.Password ? (<div className=\"text-danger\">\r\n                        {formik.errors.Password}\r\n                </div>): null }\r\n\r\n                <button type=\"submit\"   className=\"btn btn-info btn-block\">Submit</button>\r\n                <p className=\"forgot-password text-center\">\r\n                New ? Click <a href=\"#Register\" onClick={() => props.onchange()}>Register</a>\r\n                </p>\r\n            </form>\r\n\r\n        </div>\r\n        </div>\r\n        );\r\n    }\r\n\r\n\r\n\r\nexport default Login;","import React from \"react\";\r\nimport \"./siginUp.css\"\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport { useFormik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n\r\nimport {firebaseDB} from \"../firebase\";\r\n\r\nfunction SignUp(props) {\r\n    const formik = useFormik({\r\n        initialValues : {\r\n            Email:\"\",\r\n            Password:\"\",\r\n            confirmpassword:\"\",\r\n        },\r\n        validationSchema:yup.object({\r\n      \r\n            Email: yup.string()\r\n            .email()\r\n            .required(\"Email is required\"),\r\n          \r\n            Password: yup.string()\r\n            .required(\"password is required\"),\r\n            \r\n            confirmpassword: yup.string()\r\n            .oneOf([yup.ref(\"Password\"), null], \"confirm password and password must me same\")\r\n            .required(\"password is required\"),\r\n\r\n\r\n        }),\r\n        onSubmit: (userInputData)=>{\r\n            firebaseDB.auth()\r\n            .createUserWithEmailAndPassword(userInputData.Email, userInputData.Password)\r\n            .then(() => {\r\n            toast.success(\"successfully register\")\r\n            props.onchange()\r\n        })\r\n            .catch((err) => toast.error(err.message));\r\n        }\r\n    } )\r\n\r\n   \r\n\r\n  \r\n        return (\r\n            <div>\r\n            <div className =\"signUp-div-background\"> \r\n            \r\n            <form className=\"signUp-div\" autoComplete=\"off\" onSubmit = {formik.handleSubmit}>\r\n                <ToastContainer />\r\n               \r\n                <h3 className=\"text-center\">SIGN UP</h3>\r\n              \r\n\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Email</label>\r\n                    <input \r\n                    className=\"form-control\"\r\n                    type=\"text\"  \r\n                    name=\"Email\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.Email}  \r\n                    placeholder=\"email\" />\r\n                </div>\r\n                {formik.errors.Email ? (<div className=\"text-danger\">\r\n                        {formik.errors.Email}\r\n                </div>): null }\r\n\r\n                <div className=\"form-group\">\r\n                    <label >Password</label>\r\n                    <input \r\n                    className=\"form-control\"\r\n                    type=\"password\"  \r\n                    name=\"Password\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.Password}  \r\n                    placeholder=\"Password\" />\r\n                </div>\r\n\r\n                {formik.errors.Password ? (<div className=\"text-danger\">\r\n                        {formik.errors.Password}\r\n                </div>): null }\r\n\r\n                <div className=\"form-group\">\r\n                    <label >confirm Password</label>\r\n                    <input \r\n                    className=\"form-control\"\r\n                    type=\"password\"  \r\n                    name=\"confirmpassword\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.confirmpassword}  \r\n                    placeholder=\"confirm Password\" />\r\n                </div>\r\n\r\n                {formik.errors.confirmpassword ? (<div className=\"text-danger\">\r\n                        {formik.errors.confirmpassword}\r\n                </div>): null }\r\n\r\n                <button type=\"submit\" className=\"btn btn-info btn-block\" >Sign Up</button>\r\n                <p className=\"forgot-password text-right\">\r\n                    Already registered!! Click <a href=\"#Login\" onClick={() => props.onchange()}>Login</a>\r\n                </p>\r\n            </form>\r\n            </div>\r\n            </div>\r\n        \r\n        );\r\n    }\r\n\r\n\r\nexport default SignUp;","import React, {useEffect, useState} from 'react';\r\nimport \"./header.css\";\r\nimport {firebaseDB} from \"./firebase\";\r\n\r\nfunction Header({onLogOut}) {\r\n\r\n    const [username, setUserName] = useState(\"\")\r\n    function handleLogout(){\r\n        firebaseDB.auth().signOut().then(()=> onLogOut())\r\n\r\n    } \r\n\r\n    useEffect(() => {       \r\n        firebaseDB.auth().onAuthStateChanged(function(user) {\r\n            if(user)\r\n            {\r\n                setUserName(user.email)\r\n            }\r\n            else{\r\n            }\r\n        })\r\n         },[])\r\n\r\n    return (\r\n        <section>\r\n            <nav className =\"d-flex justify-content-around\">\r\n                <h2 className=\"btn btn-outline-primary\">Welcome {username}</h2>\r\n                <button onClick={()=> handleLogout()} className=\"btn btn-dark\"> logout</button>\r\n            </nav>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport Contacts from \"./components/contacts\";\nimport Login from \"./components/SignIn/SignIn\";\nimport Register from \"./components/SignUp/SignUp\";\nimport Header from \"./components/header\"\n\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction App() {\n\n  const [show, setShow] = useState(\"login\");\n\n  function showComponent(componentName) {\n    setShow(componentName);\n  } \n\n  function setComponent(componentName) {\n    setShow(componentName);\n  } \n\n  const components = {\n    \"login\":      <Login onchange={() => showComponent(\"register\")}  onLogin={() => setComponent(\"home\")}/>,\n    \"register\":  <Register onchange={() => showComponent(\"login\")}/>,\n    \"home\":      <><Header onLogOut={() => setComponent(\"login\")} /> <div className=\"row\" style={{justifyContent: \"center\" ,backgroundColor: \"#0d5449\"}}><div className = \"col-md-8 \"><Contacts /></div> </div></>,\n}\n\n  return (\n    \n       <div>\n       \n    {components[show]}  \n\n      <div className=\"custom-shape-divider-bottom-1600971516\" style={{backgroundColor: \"#0d5449\"}}>\n                  <div className=\"custom-shape-divider-bottom-1602490583\">\n              <svg data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1200 120\" preserveAspectRatio=\"none\">\n                  <path d=\"M985.66,92.83C906.67,72,823.78,31,743.84,14.19c-82.26-17.34-168.06-16.33-250.45.39-57.84,11.73-114,31.07-172,41.86A600.21,600.21,0,0,1,0,27.35V120H1200V95.8C1132.19,118.92,1055.71,111.31,985.66,92.83Z\" className=\"shape-fill\"></path>\n              </svg>\n              </div>\n          </div> \n       </div>\n      \n        \n   \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}